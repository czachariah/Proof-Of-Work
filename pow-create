#!/usr/bin/python3

import sys
import hashlib
import itertools
import time
import string

"""
This class will be used in order to create a proof-of-work string for a given message (in a file).

Input: nbits file

nbits = number of leading zero bits requested in the hash
file = contains the message to hash and put leading zeros in

Author: Chris Zachariah
"""

# number of bytes to read from file at a time
BUF_SIZE = 65536


def main():
    # check number of arguments
    if len(sys.argv) != 3:
        print("Usage: ./pow-create nbits file")
        exit()

    num_bits = 0
    # make sure its a positive number
    try:
        num_bits = int(sys.argv[1])
        if num_bits < 0:
            print("Please make sure that nbits is a positive number.")
            exit()
    except ValueError:
        print("Please use an integer number for nbits.")
        exit()

    # read from file and hash the contents
    sha256 = hashlib.sha256()
    try:
        with open(sys.argv[2], "rb") as f:
            while True:
                bytesBuf = f.read(BUF_SIZE)
                if not bytesBuf:
                    break
                sha256.update(bytesBuf)
        f.close()
        print("File:", sys.argv[2])
        print("Initial-hash: {0}".format(sha256.hexdigest()))
    except IOError:
        print("Error reading from", sys.argv[2])
        exit()
    messageHash = sha256.hexdigest()

    listOfAllCharacters = string.printable
    listOfAllCharacters = listOfAllCharacters.strip(' \t\n\r\x0b\x0c')
    listOfAllCharacters = listOfAllCharacters.replace('\'', '')
    listOfAllCharacters = listOfAllCharacters.replace('\"', '')

    # get all combinations and permutations to test as proof of work
    startIter = num_bits // 5
    iteration = 0
    r = 1
    if startIter <= 1:
        r = 1
    else:
        r = startIter - 1
    start_time = time.time()
    while r <= (len(listOfAllCharacters)):
        for proof in itertools.product(listOfAllCharacters, repeat=r):
            iteration = iteration + 1
            curProof = ""
            if len(proof) >= 1:
                for i in range(len(proof)):
                    curProof = curProof + proof[i]
            conCat = curProof + messageHash
            result = hashlib.sha256(conCat.encode())
            end_length = len(result.hexdigest()) * 4
            hex_as_int = int(result.hexdigest(), 16)
            hex_as_binary = bin(hex_as_int)
            padded_binary = hex_as_binary[2:].zfill(end_length)
            if padded_binary.find('1') >= num_bits:
                print("Proof-of-work: " + curProof)
                print("Hash: " + result.hexdigest())
                print("Leading-bits: " + str(padded_binary.find('1')))
                print("Iterations: " + str(iteration))
                print("Compute-time: " + str(time.time() - start_time))
                exit()
        r = r + 1


if __name__ == "__main__":
    main()
